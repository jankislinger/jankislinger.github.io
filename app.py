import datetime
from pathlib import Path
import polars as pl
from flask import Flask, render_template, Response
from pygments import highlight
from pygments.lexers import get_lexer_by_name, guess_lexer, TextLexer
from pygments.formatters import HtmlFormatter

app = Flask(__name__)

POSTS = [
    {
        "title": 'Bringing the "Carousel" Experience to Recommender Systems',
        "html_file": "posts/default.html",
        "publish_date": datetime.date(2025, 8, 7),
        "stub": (
            "If you've ever opened your favorite app—whether for videos, music, shopping, "
            'or beyond—you’ve likely seen multiple rows—or "carousels"—of recommendations: '
            "“Keep Watching,” “Just for You,” “Hot Right Now,” and so on. Yet, much of the "
            "academic research out there still focuses on a single ranked list—a single "
            "column of suggestions."
        ),
    },
    {
        "title": "Converting Tables to HTML: All the Ways",
        "html_file": "posts/presenting_html.html",
        "publish_date": datetime.date(2025, 7, 27),
        "stub": (
            "If you've ever opened your favorite app—whether for videos, music, shopping, "
            'or beyond—you’ve likely seen multiple rows—or "carousels"—of recommendations: '
            "“Keep Watching,” “Just for You,” “Hot Right Now,” and so on. Yet, much of the "
            "academic research out there still focuses on a single ranked list—a single "
            "column of suggestions."
        ),
    },
]


BASE_DIR = Path(__file__).parent
POSTS_DIR = BASE_DIR / "posts"
STATIC_CSS_DIR = BASE_DIR / "static" / "css"
PYGMENTS_CSS = STATIC_CSS_DIR / "pygments.css"


@app.route("/")
def index():
    return render_template("index.html", posts=POSTS)


@app.route("/blog/bringing-the-carousel-experience-to-recommender-systems/")
def post_full_page_recommender():
    return render_template("post.html", post=POSTS[0])


@app.route("/blog/converting/")
def post_converting_html():
    code_dir = Path("code_include") / "presenting_html"
    table_01 = code_dir.joinpath("table_01.html").read_text()
    py_01 = code_dir.joinpath("py_01.py").read_text()
    table_02 = code_dir.joinpath("table_02.html").read_text()
    py_02 = code_dir.joinpath("py_02.py").read_text()

    df_02 = pl.DataFrame(
        [
            ("Albania", 76.423, 5937.029526),
            ("Austria", 79.829, 36126.4927),
            ("Belgium", 79.441, 33692.60508),
            ("Bosnia and Herzegovina", 74.852, 7446.298803),
        ],
        schema=["country", "life_exp", "gdp_per_cap"],
    ).with_columns(
        is_max_gdp=pl.col("gdp_per_cap") == pl.col("gdp_per_cap").max(),
        rel_gdp_per_cap=pl.col("gdp_per_cap") / pl.col("gdp_per_cap").max(),
    )

    return render_template(
        "post.html",
        post=POSTS[1],
        table_01=table_01,
        table_02=table_02,
        py_01=py_01,
        py_02=py_02,
        df_02=df_02.to_dicts(),
    )


@app.route("/pygments.css")
def pygments_css():
    light_css = HtmlFormatter(style="friendly", cssclass="codehilite").get_style_defs(
        ".codehilite"
    )
    dark_css = HtmlFormatter(style="monokai", cssclass="codehilite").get_style_defs(
        ".dark .codehilite"
    )
    return Response(light_css + "\n\n" + dark_css, mimetype="text/css")


@app.template_filter("pyghl")
def pygments_filter(code: str, lang: str):
    return highlight_code(code, lang)


def highlight_code(code: str, lang: str) -> str:
    formatter = HtmlFormatter(cssclass="codehilite", nowrap=False)
    lexer = get_lexer_by_name(lang, stripall=False)
    return highlight(code, lexer, formatter)


def ensure_pygments_css() -> None:
    """
    Generate a combined light/dark Pygments stylesheet once:
    - Light: 'default'
    - Dark:  'monokai'
    Wrapped with prefers-color-scheme media queries.
    """
    STATIC_CSS_DIR.mkdir(parents=True, exist_ok=True)

    light = HtmlFormatter(style="default").get_style_defs(".codehilite")
    dark = HtmlFormatter(style="lightbulb").get_style_defs(".codehilite")

    combined = (
        "/* Generated by Flask on startup (Pygments) */\n"
        "@media (prefers-color-scheme: light) {\n" + light + "\n}\n"
        "@media (prefers-color-scheme: dark) {\n" + dark + "\n}\n"
    )

    PYGMENTS_CSS.write_text(combined, encoding="utf-8")


ensure_pygments_css()


if __name__ == "__main__":
    app.run()
